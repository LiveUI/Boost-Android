import com.github.spotbugs.SpotBugsTask
import groovy.json.JsonSlurper

apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'com.github.spotbugs'

apply plugin: 'kotlin-kapt'


android {

    compileSdkVersion versions.compileSdkVersion

    defaultConfig {
        applicationId "io.liveui.boost"
        minSdkVersion versions.minSdkVersion
        targetSdkVersion versions.targetSdkVersion
        versionName versions.versionName
        versionCode getAppVersionCode()
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
        resValue "string", "default_username", "core@liveui.io"
        resValue "string", "default_password", "sup3rS3cr3t"
    }

    buildTypes {
        release {
            postprocessing {
                removeUnusedCode false
                removeUnusedResources false
                obfuscate false
                optimizeCode false
                proguardFile 'proguard-rules.pro'
            }
        }
        debug {
            resValue "string", "default_username", "admin@liveui.io"
            resValue "string", "default_password", "admin"
        }
    }

    sourceSets {
        main {
            java.srcDirs = ['src/main/java']
        }
//        loadFlavors().each { GenFlavor f ->
//            "$f.flavorName" {
//                java.srcDirs = ['src/main/java', 'src/production/java']
//                res.srcDirs = ["../flavors/$f.flavorName"]
//            }
//
//        }
    }

    flavorDimensions "default"

    productFlavors {

//        loadFlavors().each { GenFlavor f ->
//            "$f.flavorName" {
//                dimension "default"
//                buildConfigField "String", "BASE_URL", "\"$f.baseUrl\""
//            }
//        }

        production {
            dimension "default"
            buildConfigField "String[]", "URL", "{" +
                    "\"http://10.0.2.2:8080/\"," +
                    "\"http://boostappstore.herokuapp.com/\"" +
                    "}"
            resValue "string", "default_username", ""
            resValue "string", "default_password", ""
        }

        mock {
            dimension "default"
            buildConfigField "String[]", "URL", "{" +
                    "\"http://assets/\"" +
                    "}"
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "AppStore-" + android.defaultConfig.versionName + "-" + variant.buildType.name + ".apk"
        }
    }

    dataBinding {
        enabled = true
    }

}


tasks.withType(SpotBugsTask) {
    effort = "max"
    reportLevel = "low"
    excludeFilter = new File("../findbugs-android-exclude.xml")
    classes = files("$project.buildDir/intermediates/classes")
    source = fileTree('src/main/java/')
    classpath = files()
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.7.1'

    api dept.androidx.annotation
    api dept.androidx.appcompat
    api dept.androidx.cardview
    api dept.androidx.constraint
    api dept.androidx.ktx
    api dept.androidx.legacy_support_v4
    api dept.androidx.lifecycle_extensions
    api dept.androidx.lifecycle_reactivestreams
    api dept.androidx.multidex
    api dept.androidx.recyclerview
    api dept.androidx.room_runtime
    api dept.androidx.room_rxjava2

    api dept.databinding.databinding_adapter
    api dept.databinding.databinding_adapter_recyclerview

    api dept.github.glide
    api dept.github.glide_annotations
    api dept.github.glide_okhttp3

    api dept.google.dagger
    api dept.google.dagger_support
    api dept.google.gson
    api dept.google.material

    api dept.kotlin.kotlin_stdlib

    api dept.rxjava.rxandroid
    api dept.rxjava.rxjava

    api dept.square.okhttp3
    api dept.square.okHttp_logging
    api dept.square.okio
    api dept.square.retrofit
    api dept.square.retrofit_adapter_rx
    api dept.square.retrofit_converter_gson
    api dept.square.timber

    kapt dept.google.dagger_compiler
    kapt dept.google.dagger_apt
    kapt dept.github.glide_compiler
    kapt dept.androidx.lifecycle_compiler
    kapt dept.androidx.room_compiler

}


static def getAppVersionCode() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHH')
    return formattedDate.toInteger()
}


class GenFlavor {
    String applicationId
    String applicationName
    String primaryColorHeader
    String primaryColorButton
    String baseUrl
    String flavorName

    @Override
    String toString() {
        return "GenFlavor{" +
                "applicationId='" + applicationId + '\'' +
                ", applicationName='" + applicationName + '\'' +
                ", primaryColorHeader='" + primaryColorHeader + '\'' +
                ", primaryColorButton='" + primaryColorButton + '\'' +
                '}'
    }
}


ArrayList<GenFlavor> loadFlavors() {
    println("Start generating flavors")
    File treeFolder = new File("flavors")
    if (treeFolder.listFiles() == null || treeFolder.listFiles().size() == 0) return ""

    ArrayList<GenFlavor> flavors = new ArrayList<>()

    for (File file : treeFolder.listFiles()) {
        if (!file.directory) continue

        def inputFile = new File("flavors/$file.name/config.json")
        def json = new JsonSlurper().parseText(inputFile.text)

        GenFlavor f = new GenFlavor()
        f.flavorName = file.name
        f.applicationId = json.applicationId
        f.applicationName = json.applicationName
        f.primaryColorButton = json.primaryColorButton
        f.primaryColorHeader = json.primaryColorHeader
        f.baseUrl = json.baseUrl
        flavors.add(f)
    }

    return flavors
}
