import com.github.spotbugs.SpotBugsTask

apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'com.github.spotbugs'

apply plugin: 'kotlin-kapt'

android {

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "cz.mangoweb.appstore"
        minSdkVersion rootProject.ext.minSdkVersion
        versionName rootProject.ext.versionName
        versionCode getAppVersionCode()
        targetSdkVersion rootProject.ext.targetSdkVersion
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
    }

    buildTypes {
        release {
            postprocessing {
                removeUnusedCode false
                removeUnusedResources false
                obfuscate false
                optimizeCode false
                proguardFile 'proguard-rules.pro'
            }
        }
    }

    flavorDimensions "default"

    productFlavors {

        production {
            dimension "default"
            buildConfigField "String", "BASE_URL", "\"http://10.0.2.2:8080/\""
        }

        mock {
            dimension "default"
            buildConfigField "String", "BASE_URL", "\"http://assets/\""
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "AppStore-" + android.defaultConfig.versionName + "-" + variant.buildType.name + ".apk"
        }
    }
}


sourceSets {
    main {
        java.srcDirs = ['src/main/java']
    }
}

tasks.withType(SpotBugsTask) {
    effort = "max"
    reportLevel = "low"
    excludeFilter = new File("../findbugs-android-exclude.xml")
    classes = files("$project.buildDir/intermediates/classes")
    source = fileTree('src/main/java/')
    classpath = files()
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.7.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"

    implementation "android.arch.lifecycle:reactivestreams:1.1.0"
    implementation "android.arch.lifecycle:extensions:1.1.0"
    implementation "android.arch.lifecycle:viewmodel:1.1.0"
    implementation "android.arch.lifecycle:livedata:1.1.0"
    implementation "com.android.support:multidex:${rootProject.ext.multidex}"
    implementation "com.android.support:support-annotations:${rootProject.ext.supportLibVersion}"
    implementation "com.android.support:recyclerview-v7:${rootProject.ext.supportLibVersion}"
    implementation "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
    implementation "com.android.support:support-v4:${rootProject.ext.supportLibVersion}"
    implementation "com.android.support:cardview-v7:${rootProject.ext.supportLibVersion}"
    implementation "com.android.support:design:${rootProject.ext.supportLibVersion}"
    implementation "com.android.support.constraint:constraint-layout:${rootProject.ext.constraint}"
    implementation "com.google.android:flexbox:${rootProject.ext.flexbox}"
    implementation "androidx.core:core-ktx:${rootProject.ext.ktx}"
    implementation "com.google.code.gson:gson:${rootProject.ext.gson}"
    implementation "com.google.dagger:dagger:${rootProject.ext.dagger}"
    implementation "com.google.dagger:dagger-android-support:${rootProject.ext.dagger}"
    implementation "com.google.guava:guava:${rootProject.ext.guava}"
    implementation "com.jakewharton.rxbinding2:rxbinding-kotlin:${rootProject.ext.rxbinding}"
    implementation "com.jakewharton.rxbinding2:rxbinding-support-v4-kotlin:${rootProject.ext.rxbinding}"
    implementation "com.jakewharton.rxbinding2:rxbinding-design-kotlin:${rootProject.ext.rxbinding}"
    implementation "com.jakewharton.rxbinding2:rxbinding-appcompat-v7-kotlin:${rootProject.ext.rxbinding}"
    implementation "com.jakewharton.timber:timber:${rootProject.ext.timber}"
    implementation "com.squareup.retrofit2:retrofit:${rootProject.ext.retrofit}"
    implementation "com.squareup.retrofit2:converter-gson:${rootProject.ext.retrofit}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${rootProject.ext.retrofit}"
    implementation "com.squareup.okhttp3:okhttp:${rootProject.ext.okHttp}"
    implementation "com.squareup.okio:okio:${rootProject.ext.okio}"
    implementation "com.squareup.okhttp3:logging-interceptor:${rootProject.ext.okHttpLogging}"
    implementation "com.github.bumptech.glide:glide:${rootProject.ext.glide}"
    implementation "io.reactivex.rxjava2:rxjava:${rootProject.ext.rxjava}"
    implementation "io.reactivex.rxjava2:rxandroid:${rootProject.ext.rxandroid}"
    implementation group: 'commons-io', name: 'commons-io', version: '2.6'
    implementation group: 'org.apache.commons', name: 'commons-text', version: '1.2'

    kapt "com.github.bumptech.glide:compiler:${rootProject.ext.glide}"
    kapt "com.google.dagger:dagger-compiler:${rootProject.ext.dagger}"
    kapt "com.google.dagger:dagger-android-processor:${rootProject.ext.dagger}"
    kapt "android.arch.lifecycle:compiler:1.1.0"


    testImplementation "android.arch.core:core-testing:1.1.0"
    androidTestImplementation "com.android.support:support-annotations:${rootProject.ext.supportLibVersion}"
    androidTestImplementation "com.android.support.test.uiautomator:uiautomator-v18:${rootProject.ext.uiAutomator}"
    androidTestImplementation "org.hamcrest:hamcrest-integration:${rootProject.ext.hamcrest}"
    androidTestImplementation("com.android.support.test.espresso:espresso-core:${rootProject.ext.espresso}") {
        exclude module: 'support-annotations'
        exclude group: 'com.google.code.findbugs'
    }
    androidTestImplementation("com.android.support.test:runner:${rootProject.ext.testRunner}") {
        exclude module: 'support-annotations'
    }

    androidTestImplementation("com.android.support.test:rules:${rootProject.ext.testRules}") {
        exclude module: 'support-annotations'
    }
}


static def getAppVersionCode() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHH')
    return formattedDate.toInteger()
}
